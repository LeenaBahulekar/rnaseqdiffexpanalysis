#!/usr/bin/env nextflow
/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    rnaseqdiffexpenanalysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Github : 
    Website: 
    Slack  : 
----------------------------------------------------------------------------------------
*/

nextflow.enable.dsl=2


include { DIFF_EXP } from './modules/diff_exp'
include { GENE_DRUG } from './modules/gene_drug'
include { PATHWAY_ENRICHMENT } from './modules/pathway_enrichment'
include { ANNOTATION_OPEN_TARGET } from './modules/annotation_open_target'

def get_publish_loc(file_path) {
    def file_path_name = file_path.toString()
    def dir_path = file_path_name.substring(file_path_name.indexOf(params.output_dir), file_path_name.length())
}

workflow RNASEQ_DIFF_EXP_ANALYSIS {
	//Feature (rows) x Sample (columns) expression file in CSV or TSV format
	ip_count_file = Channel.fromPath(params.count_file, checkIfExists: true)
	
	//sample file that was used as an input to the rnaseq pipeline
	ip_sample_info_file = Channel.fromPath(params.sample_info_file, checkIfExists: true)

	//validate that the final result dir is not NULL
	if (!params.result_dir) {
	    println "Result dir cannot be empty"
	    log.error "Result dir cannot be empty"
	    System.exit(1)
	}

	//invoke the differential expressionn process
	DIFF_EXP(ip_count_file, ip_sample_info_file)
	
	//view the outputs generated by differential expression. The number of output files 
	//generated is dependent on the parameters passed like the contrasts/ cutoff values
	diff_exp_ch = DIFF_EXP.out.diff_exp_data.flatten()
	                                .map{file -> tuple(get_publish_loc(file.getParent()), file)}
	diff_exp_ch.view()
	DIFF_EXP.out.ref_gene_file.view()

	//protein protein interaction data 
    ppi_input_file = Channel.fromPath(params.ppi_file, checkIfExists: true)
	
	//drug target data
	adjacency_input_file = Channel.fromPath(params.drug_target_file, checkIfExists: true)
	
	//output of the differential containing the query gene data
	GENE_DRUG(diff_exp_ch, ppi_input_file.collect(), adjacency_input_file.collect())
	//GENE_DRUG.out.gene_drug_op.view()
	
	PATHWAY_ENRICHMENT(diff_exp_ch, DIFF_EXP.out.ref_gene_file.collect())

	ANNOTATION_OPEN_TARGET(diff_exp_ch)
	
}

workflow {
    RNASEQ_DIFF_EXP_ANALYSIS ()
}

workflow.onComplete {
    println "Pipeline started at: $workflow.start"
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}

workflow.onError = {
    println "Oops .. something when wrong"
}